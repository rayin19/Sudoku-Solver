//Java Program

import java.util.*;
import java.lang.*;
import java.io.*;
import java.util.stream.IntStream;

class GFG {
	public static void main (String[] args) {
		//code
		Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		while(t-- >0){
		    int[][] a=new int[9][9];
		    for(int i=0;i<9;i++){
		        for(int j=0;j<9;j++)
		        a[i][j]=(sc.nextInt());
		    }
		   if(solve(a)){
		    for(int i=0;i<9;i++){
		        for(int j=0;j<9;j++)
		        System.out.print(a[i][j]+ " ");
		    }
		    System.out.println();
		   }
		   else
		   System.out.println(-1);
		}
	}
	private static boolean solve(int[][] board) {
    for (int row = 0; row < 9; row++) {
        for (int column = 0; column < 9; column++) {
            if (board[row][column] == 0) {
                for (int k = 1; k <= 9; k++) {
                    
                    if (isValid(board, row, column,k)){
                        board[row][column] = k;
                    if(solve(board)) {
                        return true;
                    }
                    }
                    board[row][column] = 0;
                }
                return false;
            }
        }
    }
    return true;
}
private static boolean isValid(int[][] board, int row, int column,int k) {
    return (rowConstraint(board, row,k)
      && columnConstraint(board, column,k) 
      && subsectionConstraint(board, row, column,k));
}
private static boolean rowConstraint(int[][] board, int row,int k) {
   for(int i=0;i<9;i++){
       if(board[row][i]==k)
       return false;
   }
   return true;
}
private static boolean columnConstraint(int[][] board, int column,int k) {
   for(int i=0;i<9;i++){
       if(board[i][column]==k)
       return false;
   }
   return true;
}
private static boolean subsectionConstraint(int[][] board, int x, int y,int k) {
   /* boolean[] constraint = new boolean[9];
    int subsectionRowStart = (row / 3) * 3;
    int subsectionRowEnd = subsectionRowStart + 3;
 
    int subsectionColumnStart = (column / 3) * 3;
    int subsectionColumnEnd = subsectionColumnStart + 3;
 
    for (int r = subsectionRowStart; r < subsectionRowEnd; r++) {
        for (int c = subsectionColumnStart; c < subsectionColumnEnd; c++) {
            if (!checkConstraint(board, r, constraint, c)) return false;
        }
    }
    return true;*/
    for(int i= x-(x%3);i<(3*((x/3)+1));i++){
        for(int j=y-(y%3);j<(3*((y/3)+1));j++){
            if(board[i][j]==k)
            return false;
        }
    }
    return true;
}
/*private static boolean checkConstraint(
  int[][] board, 
  int row, 
  boolean[] constraint, 
  int column) {
    if (board[row][column] != 0) {
        if (!constraint[board[row][column] - 1]) {
            constraint[board[row][column] - 1] = true;
        } else {
            return false;
        }
    }
    return true;
}*/
}
